RGS_Phase=load('Phase_Vector_Slow_Wave_Pyr_RGS_Session_1.mat').Phase_Vector_Slow_Wave_Pyr_RGS_Session_1 ;
Veh_Phase=load('Phase_Vector_Slow_Wave_Pyr_Veh_Session_1.mat').Phase_Vector_Slow_Wave_Pyr_Veh_Session_1;

% RGS_Phase=load('Phase_Vector_Slow_Wave_Pyr_RGS_Session_1.mat');
% Veh_Phase=load('Phase_Vector_Slow_Wave_Pyr_Veh_Session_1.mat');

% Clarification regarding input data: For using the vars generated by Pelin
% (load('Final_Var.mat') will load everything she sent) for the 4 clusters, use lines 2-3. 
% To use the Ripple_Analysis_All function,use lines 5-6 and uncomment lines 21-22.

% Loading Pelin's Variable for all clusters
cd '/home/irene/Downloads/RGS14_all_Shekhar'
load('Final_Var.mat')

rgs_titles=extractfield(RGS_Phase,'WFM_Titles');
veh_titles=extractfield(Veh_Phase,'WFM_Titles');



%% Getting Ripple Response Data
% Ripple_Analysis_RGS_Pyr=Ripple_Analysis_All(RGS_Phase,'rgs');
% Ripple_Analysis_Veh_Pyr=Ripple_Analysis_All(Veh_Phase,'Veh');

% Getting Ripple Response Data- cluster version
Ripple_Analysis_RGS_Pyr=Final_Var_c4_rgs;
Ripple_Analysis_Veh_Pyr=Final_Var_c4_veh;

%% Average Response: All groups combined
% RGS
Angles_RGS=vertcat(Ripple_Analysis_RGS_Pyr.Ripple_Spike_Times_Normalized);
Angles_RGS=[Angles_RGS{:}];

% Vehicle
Angles_Veh=vertcat(Ripple_Analysis_Veh_Pyr.Ripple_Spike_Times_Normalized);
Angles_Veh=[Angles_Veh{:}];

Average Response: All groups combined- cluster version
RGS
Angles_RGS=vertcat(Final_Var_c4_rgs.Ripple_Spike_Times_Normalized);
Angles_RGS=[Angles_RGS{:}];
% Vehicle
Angles_Veh=vertcat(Final_Var_c4_veh.Ripple_Spike_Times_Normalized);
Angles_Veh=[Angles_Veh{:}];

% Quest for averaging and normalizing

% Veh
Counts_Avg_Veh_Temp=[]; Counts_Norm_Veh_Temp=[];

for ii=1:size(Ripple_Analysis_Veh_Pyr,2)
    
    current_unit=vertcat(Ripple_Analysis_Veh_Pyr(ii).Ripple_Spike_Times_Normalized);
    current_unit=[current_unit{:}];
    
        Hist_Veh_Per_Unit=histogram(current_unit);Hist_Veh_Per_Unit.BinWidth=0.01;
        Counts_Veh_Avg=discretize(current_unit,-1:0.01:1);
    Counts_Veh_Avg=histcounts(current_unit,-1:0.01:1); % fixing the number of bins to 200
    
    Counts_Veh_Norm=zscore(Counts_Veh_Avg); %z normalizing bin counts
        Counts_Veh_Avg=Hist_Veh_Per_Unit.BinCounts;
    
    Counts_Norm_Veh_Temp=[Counts_Norm_Veh_Temp Counts_Veh_Norm'];
    
    Counts_Avg_Veh_Temp=[Counts_Avg_Veh_Temp  Counts_Veh_Avg'];
    
    
end

Counts_Avg_Veh_Final=[]; Counts_Norm_Veh_Final=[];
for ii=1:size(Counts_Avg_Veh_Temp',2)
    
    Counts_Avg_Veh_Final=[Counts_Avg_Veh_Final; nanmean(Counts_Avg_Veh_Temp(ii,:))];
    Counts_Norm_Veh_Final=[Counts_Norm_Veh_Final; nanmean(Counts_Norm_Veh_Temp(ii,:))];
    
end


% RGS
Counts_Avg_RGS_Temp=[]; Counts_Norm_RGS_Temp=[];

for ii=1:size(Ripple_Analysis_RGS_Pyr,2)
    
    current_unit=vertcat(Ripple_Analysis_RGS_Pyr(ii).Ripple_Spike_Times_Normalized);
    
    current_unit=[current_unit{:}];
    
    Counts_RGS_Avg=histcounts(current_unit,-1:0.01:1); 
    Counts_RGS_Norm=zscore(Counts_RGS_Avg);%z normalizing bin counts
    
    Counts_Avg_RGS_Temp=[Counts_Avg_RGS_Temp  Counts_RGS_Avg'];
    Counts_Norm_RGS_Temp=[Counts_Norm_RGS_Temp Counts_RGS_Norm'];
    
    
end

Counts_Avg_RGS_Final=[]; Counts_Norm_RGS_Final=[];
for ii=1:size(Counts_Avg_RGS_Temp',2)
    
    Counts_Avg_RGS_Final=[Counts_Avg_RGS_Final; nanmean(Counts_Avg_RGS_Temp(ii,:))];
    Counts_Norm_RGS_Final=[Counts_Norm_RGS_Final; nanmean(Counts_Norm_RGS_Temp(ii,:))];
    
end

% Storing Norm Counts per neuron- Cluster section
Counts_Norm_RGS_Temp=Counts_Norm_RGS_Temp'; Counts_Norm_Veh_Temp=Counts_Norm_Veh_Temp';
rgs_smooth_2_c4=[];veh_smooth_2_c4=[]; 
for ii=1:size(Counts_Norm_RGS_Temp,1)
    x=smooth(smooth(Counts_Norm_RGS_Temp(ii,:)));
    rgs_smooth_2_c4=[rgs_smooth_2_c4  x];
    
end

for ii=1:size(Counts_Norm_Veh_Temp,1)
    x=smooth(smooth(Counts_Norm_Veh_Temp(ii,:)));
    veh_smooth_2_c4=[veh_smooth_2_c4  x];
    
end

rgs_smooth_2_c4=rgs_smooth_2_c4';
veh_smooth_2_c4=veh_smooth_2_c4';



Data_RGS=array2table(rgs_smooth_2_c4);
Data_Veh=array2table(veh_smooth_2_c4);

%% Generating vars to plot 
% name='Ripple_NormZ_Plots_Combined_Groups_RGS_vs_Veh_c4_Neuron_Wise.xls';
% 
% writecell(rgs_titles',name,'Sheet','RGS_Titles')
% writetable(Data_RGS,name,'Sheet','RGS_c4')
% writecell(veh_titles',name,'Sheet','Veh_Titles')
% writetable(Data_Veh,name,'Sheet','Veh_c4')
